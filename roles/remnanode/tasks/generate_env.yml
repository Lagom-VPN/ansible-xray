---

- name: Use manual SSL_CERT if provided
  ansible.builtin.set_fact:
    remnanode_env_effective: "{{ remnanode_env | combine({'SSL_CERT': remnanode_ssl_cert}) }}"
  when: remnanode_ssl_cert_mode == "manual"
  tags:
    - remnanode

- name: Handle smart SSL certificate mode
  when: remnanode_ssl_cert_mode == "smart"
  tags:
    - remnanode
  block:
    - name: Fetch SSL_CERT (pubKey) from Remnawave API
      delegate_to: localhost
      ansible.builtin.uri:
        url: "https://{{ remnanode_remnawave_panel_domain }}/api/keygen/"
        method: GET
        headers: "{{ remnanode_remnawave_api_headers_processed }}"
        return_content: true
        status_code: 200
      register: remnanode_keygen_response
      failed_when: remnanode_keygen_response.status != 200
      no_log: true

    - name: Extract new SSL_CERT (base64 blob) from API
      ansible.builtin.set_fact:
        remnanode_ssl_cert_new: "{{ remnanode_keygen_response.json.response.pubKey | trim }}"
      no_log: true

    - name: Decode NEW SSL_CERT (base64→json)
      ansible.builtin.set_fact:
        remnanode_ssl_cert_new_decoded: "{{ remnanode_ssl_cert_new | b64decode | from_json }}"
      no_log: true

    - name: Validate NEW SSL_CERT has required keys
      ansible.builtin.assert:
        that:
          - remnanode_ssl_cert_new_decoded.caCertPem is defined
          - remnanode_ssl_cert_new_decoded.jwtPublicKey is defined
        quiet: true
      no_log: true

    - name: Read current SSL_CERT line from .env (if present)
      ansible.builtin.command: grep '^SSL_CERT=' {{ remnanode_project_dir }}/.env
      register: remnanode_env_current
      changed_when: false
      failed_when: false

    - name: Extract CURRENT SSL_CERT (base64 blob) if exists
      ansible.builtin.set_fact:
        remnanode_ssl_cert_current: >-
          {{
            (remnanode_env_current.stdout | regex_replace('^SSL_CERT=', '') | regex_replace('^"(.*)"$', '\\1') | trim)
            if (remnanode_env_current.stdout | default('')) != '' else None
          }}
      no_log: true

    - name: Decode CURRENT SSL_CERT (base64→json) if exists
      ansible.builtin.set_fact:
        remnanode_ssl_cert_current_decoded: "{{ remnanode_ssl_cert_current | b64decode | from_json }}"
      when:
        - remnanode_ssl_cert_current is defined
        - remnanode_ssl_cert_current is not none
        - remnanode_ssl_cert_current | length > 0
      no_log: true
    
    - name: Set CURRENT SSL_CERT decoded to none if not exists
      ansible.builtin.set_fact:
        remnanode_ssl_cert_current_decoded: null
      when: >-
        remnanode_ssl_cert_current is not defined or
        remnanode_ssl_cert_current is none or
        (remnanode_ssl_cert_current | default('') | length == 0)
      no_log: true

    - name: Decide whether to REUSE current base64 by CA+JWT equality
      ansible.builtin.set_fact:
        remnanode_ssl_cert_effective_b64: >-
          {{
            (
              remnanode_ssl_cert_current
              if (
                    remnanode_ssl_cert_current_decoded is mapping
                and remnanode_ssl_cert_current_decoded.caCertPem is defined
                and remnanode_ssl_cert_current_decoded.jwtPublicKey is defined
                and remnanode_ssl_cert_current_decoded.caCertPem
                      == remnanode_ssl_cert_new_decoded.caCertPem
                and remnanode_ssl_cert_current_decoded.jwtPublicKey
                      == remnanode_ssl_cert_new_decoded.jwtPublicKey
              )
              else remnanode_ssl_cert_new
            )
          }}
      no_log: true

    - name: Build effective env (with idempotent SSL_CERT)
      ansible.builtin.set_fact:
        remnanode_env_effective: "{{ remnanode_env | combine({'SSL_CERT': remnanode_ssl_cert_effective_b64}) }}"
      no_log: true

- name: Generate .env file
  become: true
  ansible.builtin.template:
    src: remnanode.env.j2
    dest: "{{ remnanode_project_dir }}/.env"
    owner: root
    group: root
    mode: "0640"
  notify: Restart remnanode
  no_log: true
  tags:
    - remnanode
